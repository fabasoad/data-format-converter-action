---
name: Data Format Converter Action
author: Yevhen Fabizhevskyi
description: |
  GitHub action that converts YAML / JSON / XML / PROPS / Lua data formats interchangeably
branding:
  icon: copy
  color: green
inputs:
  source-pattern:
    description: |
      Pattern in glob format that would be used to list the files.
    required: true
  from:
    description: |
      Data type of the source files. Possible values: json, xml, yaml, props, lua.
      Defaults to the type defined by file extension.
    required: false
  to:
    description: |
      Data type to be converted to. Possible values: json, xml, yaml, props, lua.
    required: true
  github-token:
    description: |
      GitHub token that is used to send requests to GitHub API such as downloading
      asset. Defaults to the token provided by GitHub Actions environment.
    required: false
    default: ${{ github.token }}
outputs:
  result-path:
    description: |
      The absolute path to the directory with the converted files inside. The
      name of each converted file is the same as the source file.
    value: ${{ steps.convert.outputs.result-path }}
runs:
  using: "composite"
  steps:
    - name: Validate inputs
      env:
        INPUT_SOURCE_PATTERN: "${{ inputs.source-pattern }}"
        INPUT_FROM: "${{ inputs.from }}"
        INPUT_TO: "${{ inputs.to }}"
        INPUT_GITHUB_TOKEN: "${{ inputs.github-token }}"
      run: |
        ${GITHUB_ACTION_PATH}/src/validate-inputs.sh \
          "${INPUT_SOURCE_PATTERN}" \
          "${INPUT_FROM}" \
          "${INPUT_TO}" \
          "${INPUT_GITHUB_TOKEN}"
      shell: sh

    - name: Collect info
      if: ${{ inputs.from != inputs.to }}
      id: info
      env:
        INPUT_FROM: "${{ inputs.from }}"
        INPUT_TO: "${{ inputs.to }}"
      run: ./collect-info.sh "${INPUT_FROM}" "${INPUT_TO}"
      shell: sh
      working-directory: ${{ github.action_path }}/src

    - name: Define yq binary based on OS
      if: ${{ inputs.from != inputs.to && steps.info.outputs.yq-installed == 'false' }}
      id: binary
      run: ./define-yq-binary.sh
      shell: sh
      working-directory: ${{ github.action_path }}/src

    - name: Download mikefarah/yq
      if: ${{ inputs.from != inputs.to && steps.info.outputs.yq-installed == 'false' }}
      id: download-binary
      uses: robinraju/release-downloader@v1
      with:
        repository: "mikefarah/yq"
        latest: "true"
        fileName: "${{ steps.binary.outputs.name }}"
        out-file-path: "${{ steps.info.outputs.bin-dir }}"
        token: "${{ inputs.github-token }}"

    - name: Install mikefarah/yq
      if: ${{ inputs.from != inputs.to && steps.info.outputs.yq-installed == 'false' }}
      id: install-yq
      run: |
        ./install-yq.sh \
          "${{ steps.binary.outputs.name }}" \
          "${{ steps.info.outputs.bin-path }}" \
          "${{ steps.download-binary.outputs.tag_name }}" \
          "${{ steps.info.outputs.yq-path }}"
      shell: sh
      working-directory: ${{ github.action_path }}/src

    - name: Print yq version
      if: ${{ inputs.from != inputs.to }}
      run: ${{ steps.info.outputs.yq-path }} --version
      shell: sh

    - name: Convert
      id: convert
      env:
        INPUT_FROM: "${{ inputs.from }}"
        INPUT_TO: "${{ inputs.to }}"
        INPUT_SOURCE_PATTERN: "${{ inputs.source-pattern }}"
      run: |
        ${GITHUB_ACTION_PATH}/src/convert.sh \
          "${{ steps.info.outputs.yq-path }}" \
          "${INPUT_FROM:-all}" \
          "${INPUT_TO}" \
          "${INPUT_SOURCE_PATTERN}"
      shell: bash
