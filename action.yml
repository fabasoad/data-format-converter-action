---
name: 'Data Format Converter Action'
author: Yevhen Fabizhevskyi
description: 'GitHub action that converts YAML / JSON / XML / PROPS data formats interchangeably'
branding:
  icon: copy
  color: green
inputs:
  input:
    description: 'Path to the file with the data to be converted.'
    required: true
  from:
    description: 'Format of a file. Possible values: json, xml, yaml, props.'
    required: true
  to:
    description: 'Format of a file as a result. Possible values: json, xml, yaml, props.'
    required: true
outputs:
  output:
    description: 'Converted data.'
    value: ${{ steps.result.outputs.data }}
runs:
  using: 'composite'
  steps:
    - name: Collect yq info
      id: info
      env:
        YQ_VERSION: 4.30.5
        YQ_TEMP_FILE: .data-format-converter-action
      run: |
        echo "YQ_VERSION=$YQ_VERSION" >> $GITHUB_OUTPUT
        echo "YQ_TEMP_FILE=$YQ_TEMP_FILE" >> $GITHUB_OUTPUT
        YQ_INSTALLED=$(if command -v yq >/dev/null 2>&1; then echo true; else echo false; fi)
        echo "YQ_INSTALLED=$YQ_INSTALLED" >> $GITHUB_OUTPUT
        if [ "${{ runner.os }}" = "macOS" ]; then
          if [ "${{ runner.arch }}" = "ARM64" ]; then
            YQ_BINARY=yq_darwin_arm64
          else
            YQ_BINARY=yq_darwin_amd64
          fi
        elif [ "${{ runner.os }}" = "Windows" ]; then
          if [ "${{ runner.arch }}" = "X86" ]; then
            YQ_BINARY=yq_windows_386.exe
          else
            YQ_BINARY=yq_windows_amd64.exe
          fi
        elif [ "${{ runner.os }}" = "Linux" ]; then
          if [ "${{ runner.arch }}" = "X86" ]; then
            YQ_BINARY=yq_linux_386
          elif [ "${{ runner.arch }}" = "ARM" ]; then
            YQ_BINARY=yq_linux_arm
          elif [ "${{ runner.arch }}" = "ARM64" ]; then
            YQ_BINARY=yq_linux_arm64
          else
            YQ_BINARY=yq_linux_amd64
          fi
        else
          echo "::error file=action.yml,line=44,col=11,endColumn=11::${{ runner.os }} is not supported"
          exit 1
        fi
        echo "YQ_BINARY=$YQ_BINARY" >> $GITHUB_OUTPUT
        if [ "${{ runner.os }}" = "Windows" ]; then
          echo "YQ_EXEC=yq.exe" >> $GITHUB_OUTPUT
        else
          echo "YQ_EXEC=yq" >> $GITHUB_OUTPUT
        fi
      shell: sh
    - name: Check same from and to
      if: ${{ inputs.from == inputs.to }}
      run: cp "${{ inputs.input }}" "${{ steps.info.outputs.YQ_TEMP_FILE }}"
      shell: sh
    - name: Download mikefarah/yq
      if: ${{ inputs.from != inputs.to && steps.info.outputs.YQ_INSTALLED == 'false' }}
      uses: robinraju/release-downloader@v1.6
      with:
        repository: mikefarah/yq
        latest: false
        tag: v${{ steps.info.outputs.YQ_VERSION }}
        fileName: ${{ steps.info.outputs.YQ_BINARY }}
        tarBall: false
        zipBall: false
    - name: Install mikefarah/yq
      if: ${{ inputs.from != inputs.to && steps.info.outputs.YQ_INSTALLED == 'false' }}
      run: |
        mv ${{ steps.info.outputs.YQ_BINARY }} ${{ steps.info.outputs.YQ_EXEC }}
        if [ "${{ runner.os }}" != "Windows" ]; then
          chmod +x ${{ steps.info.outputs.YQ_EXEC }}
        fi
        echo "$(pwd)" >> $GITHUB_PATH
        echo "::debug::${{ steps.info.outputs.YQ_BINARY }}@${{ steps.info.outputs.YQ_VERSION }} has been installed"
      shell: sh
    - name: Convert
      if: ${{ inputs.from != inputs.to }}
      run: ${{ steps.info.outputs.YQ_EXEC }} -P '${{ inputs.input }}' -p=${{ inputs.from }} -o=${{ inputs.to }} > '${{ steps.info.outputs.YQ_TEMP_FILE }}'
      shell: sh
    - name: Save output
      id: result
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          core.setOutput('data', fs.readFileSync('${{ steps.info.outputs.YQ_TEMP_FILE }}', 'utf-8').replace(/\s+$/gm, ''));
          fs.unlinkSync('${{ steps.info.outputs.YQ_TEMP_FILE }}');
