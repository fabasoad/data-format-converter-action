---
name: 'YAML/JSON/XML Converter Action'
author: Yevhen Fabizhevskyi
description: 'This action takes file that in YAML/JSON/XML format and produces it in output in YAML/JSON/XML format.'
branding:
  icon: copy
  color: green
inputs:
  input:
    description: 'Path to the file with the data or data itself'
    required: true
  from:
    description: 'Format of a file. Possible values: json, xml, yaml, toml.'
    required: true
  to:
    description: 'Format of a file as a result. Possible values: json, xml, yaml, toml.'
    required: true
  output-type:
    description: 'Either path to the file with the converted data or converted data itself. Possible values: file, data.'
    required: false
    default: 'data'
outputs:
  output:
    description: 'File with the converted data in case of output-type is "file", otherwise - converted data itself.'
    value: ${{ steps.result.outputs.data }}
runs:
  using: 'composite'
  steps:
    - name: Collect yq info
      id: yq_info
      run: |
        result=$(if command -v yq >/dev/null 2>&1; then echo true; else echo false; fi)
        echo "YQ_INSTALLED=$result" >> $GITHUB_OUTPUT
        if [[ "${{ runner.os }}" == "macOS" ]]; then
          if [[ "${{ runner.arch }}" == "ARM64" ]]; then
            YQ_BINARY=yq_darwin_arm64
          else
            YQ_BINARY=yq_darwin_amd64
          fi
        elif [[ "${{ runner.os }}" == "Windows" ]]; then
          if [[ "${{ runner.arch }}" == "X86" ]]; then
            YQ_BINARY=yq_windows_386.exe
          else
            YQ_BINARY=yq_windows_amd64.exe
          fi
        elif [[ "${{ runner.os }}" == "Linux" ]]; then
          if [[ "${{ runner.arch }}" == "X86" ]]; then
            YQ_BINARY=yq_linux_386
          elif [[ "${{ runner.arch }}" == "ARM" ]]; then
            YQ_BINARY=yq_linux_arm
          elif [[ "${{ runner.arch }}" == "ARM64" ]]; then
            YQ_BINARY=yq_linux_arm64
          else
            YQ_BINARY=yq_linux_amd64
          fi
        else
          echo "::error file=action.yml,line=44,col=11,endColumn=11::${{ runner.os }} is not supported"
          exit 1
        fi
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          echo "YQ_EXEC=yq.exe" >> $GITHUB_OUTPUT
        else
          echo "YQ_EXEC=yq" >> $GITHUB_OUTPUT
        fi
        echo "YQ_BINARY=$YQ_BINARY" >> $GITHUB_OUTPUT
      shell: bash
    - name: Install mikefarah/yq (Linux / macOS)
      if: ${{ steps.yq_info.outputs.YQ_INSTALLED == 'false' && inputs.from != 'xml' && runner.os != 'Windows' }}
      env:
        YQ_URL: https://github.com/mikefarah/yq/releases/download/v4.28.1/${{ steps.yq_info.outputs.YQ_BINARY }}
      run: |
        wget $YQ_URL -O .
        mv ${{ steps.yq_info.outputs.YQ_BINARY }} ${{ steps.yq_info.outputs.YQ_EXEC }}
        chmod +x ${{ steps.yq_info.outputs.YQ_EXEC }}
        echo "$(pwd)" >> $GITHUB_PATH
        echo "::debug::${{ steps.yq_info.outputs.YQ_BINARY }}@${YQ_VERSION} has been installed"
      shell: bash
    - name: Install mikefarah/yq (Windows)
      if: ${{ steps.yq_info.outputs.YQ_INSTALLED == 'false' && inputs.from != 'xml' && runner.os == 'Windows' }}
      env:
        YQ_URL: https://github.com/mikefarah/yq/releases/download/v4.28.1/${{ steps.yq_info.outputs.YQ_BINARY }}
      run: |
        Invoke-WebRequest -URI $Env:YQ_URL -OutFile ${{ steps.yq_info.outputs.YQ_EXEC }}
        echo "$(pwd)" >> $GITHUB_PATH
        echo "::debug::${{ steps.yq_info.outputs.YQ_BINARY }}@$Env:YQ_VERSION has been installed"
      shell: pwsh
    # From YAML/JSON
    - name: YAML/JSON to all
      if: ${{ inputs.from != 'xml' }}
      run: ${{ steps.yq_info.outputs.YQ_EXEC }} -P '${{ inputs.input }}' -o=${{ inputs.to }} > .data-format-converter-action
      shell: bash
    - name: Uninstall mikefarah/yq
      if: ${{ steps.yq_info.outputs.YQ_INSTALLED == 'false' && inputs.from != 'xml' }}
      run: rm -f ${{ steps.yq_info.outputs.YQ_EXEC }}
      shell: bash
    # From XML
    - name: Install kislyuk/yq
      if: ${{ inputs.from == 'xml' }}
      run: pip install yq==3.1.0
      shell: bash
    - name: XML to JSON
      if: ${{ inputs.from == 'xml' && inputs.to == 'json' }}
      run: xq . '${{ inputs.input }}' > .data-format-converter-action
      shell: bash
    - name: XML to YAML
      if: ${{ inputs.from == 'xml' && inputs.to == 'yaml' }}
      run: xq . '${{ inputs.input }}' | yq -y . > .data-format-converter-action
      shell: bash
    - name: Uninstall kislyuk/yq
      if: ${{ inputs.from == 'xml' }}
      run: pip uninstall -y yq
      shell: bash
    # Output
    - name: Save output
      id: result
      run: |
        content=$(cat .data-format-converter-action)
        content="${content//'%'/'%25'}"
        content="${content//$'\n'/'%0A'}"
        content="${content//$'\r'/'%0D'}"
        echo "::set-output name=data::$content"
        rm -f .data-format-converter-action
      shell: bash
#        echo "data=$content" >> $GITHUB_OUTPUT
