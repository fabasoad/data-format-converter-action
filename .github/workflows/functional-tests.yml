---
name: Functional tests

on: # yamllint disable-line rule:truthy
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  schedule:
    - cron: "0 0 * * 1"

defaults:
  run:
    shell: sh

jobs:
  github-token:
    name: Get GitHub token
    timeout-minutes: 3
    runs-on: ubuntu-latest
    outputs:
      value: ${{ steps.encrypt-token.outputs.value }}
    steps:
      - name: Generate readonly token
        uses: actions/create-github-app-token@v1
        id: readonly-token
        with:
          app-id: ${{ vars.APP_ID_READONLY }}
          private-key: ${{ secrets.APP_PRIVATE_KEY_READONLY }}
          skip-token-revoke: true
      - name: Install dependencies
        run: pip install cryptography
      - name: Encrypt token
        id: encrypt-token
        run: |
          import os
          from cryptography.fernet import Fernet
          fernet = Fernet('${{ secrets.PASSPHRASE }}'.encode('utf-8'))
          encrypted_token = fernet.encrypt('${{ steps.readonly-token.outputs.token }}'.encode()).decode('utf-8')
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print('value={0}'.format(encrypted_token), file=fh)
        shell: python
  convert:
    name: Convert
    timeout-minutes: 5
    needs: [github-token]
    strategy:
      fail-fast: false
      matrix:
        #        os: ["ubuntu", "windows", "macos"]
        os: ["macos"]
        from: ["yaml", "json", "xml", "props"]
        to: ["yaml", "json", "xml", "props"]
    runs-on: ${{ matrix.os }}-latest
    steps:
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Prepare
        run: |
          # yaml
          echo 's:' > expected.yaml
          echo '  v: "1"' >> expected.yaml
          echo '  m:' >> expected.yaml
          echo '    - t1' >> expected.yaml
          echo '    - t2' >> expected.yaml
          # json
          echo '{' > expected.json
          echo '  "s": {' >> expected.json
          echo '    "v": "1",' >> expected.json
          echo '    "m": [' >> expected.json
          echo '      "t1",' >> expected.json
          echo '      "t2"' >> expected.json
          echo '    ]' >> expected.json
          echo '  }' >> expected.json
          echo '}' >> expected.json
          # xml
          echo '<s>' > expected.xml
          echo '  <v>1</v>' >> expected.xml
          echo '  <m>t1</m>' >> expected.xml
          echo '  <m>t2</m>' >> expected.xml
          echo '</s>' >> expected.xml
          # props
          echo 's.v = 1' > expected.props
          echo 's.m.0 = t1' >> expected.props
          echo 's.m.1 = t2' >> expected.props
      - name: Install dependencies
        run: pip install cryptography
      - name: Decrypt token
        id: decrypt-token
        run: |
          import os
          from cryptography.fernet import Fernet
          fernet = Fernet('${{ secrets.PASSPHRASE }}'.encode('utf-8'))
          decrypted_token = fernet.decrypt('${{ needs.github-token.outputs.value }}'.encode('utf-8')).decode()
          print('::add-mask::{0}'.format(decrypted_token))
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print('value={0}'.format(decrypted_token), file=fh)
        shell: python
      - name: Convert
        uses: ./
        id: convert
        with:
          input: expected.${{ matrix.from }}
          from: ${{ matrix.from }}
          to: ${{ matrix.to }}
          token: ${{ steps.decrypt-token.outputs.value }}
      - name: Save result
        run: echo '${{ steps.convert.outputs.output }}' > actual.${{ matrix.to }}
      - name: Print actual file
        run: cat actual.${{ matrix.to }}
      - name: Validate
        run: cmp -s "expected.${{ matrix.to }}" "actual.${{ matrix.to }}" || diff "expected.${{ matrix.to }}" "actual.${{ matrix.to }}"
      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f expected.{json,props,xml,yaml}
          rm -f actual.${{ matrix.to }}
  convert-container:
    name: Convert
    timeout-minutes: 5
    needs: [github-token]
    strategy:
      fail-fast: false
      matrix:
        image: ["centos"]
        #        image: ["alpine", "centos"]
        from: ["yaml", "json", "xml", "props"]
        to: ["yaml", "json", "xml", "props"]
        include:
          #          - image: alpine
          #            setup-command: |
          #              # cryptography
          #              apk add py3-pip
          #              pip install cryptography
          - image: centos
            setup-command: |
              yum update -y
              # cmp
              sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-*
              sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-*
              yum install -y diffutils
              # cryptography
              yum install -y epel-release
              yum install -y python3-pip
              pip install cryptography
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.image }}:latest
    steps:
      - name: Setup
        run: ${{ matrix.setup-command }}
      - name: Checkout ${{ github.repository }}
        uses: actions/checkout@v4
      - name: Prepare
        run: |
          # yaml
          echo 's:' > expected.yaml
          echo '  v: "1"' >> expected.yaml
          echo '  m:' >> expected.yaml
          echo '    - t1' >> expected.yaml
          echo '    - t2' >> expected.yaml
          # json
          echo '{' > expected.json
          echo '  "s": {' >> expected.json
          echo '    "v": "1",' >> expected.json
          echo '    "m": [' >> expected.json
          echo '      "t1",' >> expected.json
          echo '      "t2"' >> expected.json
          echo '    ]' >> expected.json
          echo '  }' >> expected.json
          echo '}' >> expected.json
          # xml
          echo '<s>' > expected.xml
          echo '  <v>1</v>' >> expected.xml
          echo '  <m>t1</m>' >> expected.xml
          echo '  <m>t2</m>' >> expected.xml
          echo '</s>' >> expected.xml
          # props
          echo 's.v = 1' > expected.props
          echo 's.m.0 = t1' >> expected.props
          echo 's.m.1 = t2' >> expected.props
      - name: Decrypt token
        id: decrypt-token
        run: |
          import os
          from cryptography.fernet import Fernet
          fernet = Fernet('${{ secrets.PASSPHRASE }}'.encode('utf-8'))
          decrypted_token = fernet.decrypt('${{ needs.github-token.outputs.value }}'.encode('utf-8')).decode()
          print('::add-mask::{0}'.format(decrypted_token))
          with open(os.environ['GITHUB_OUTPUT'], 'a') as fh:
            print('value={0}'.format(decrypted_token), file=fh)
        shell: python
      - name: Convert
        uses: ./
        id: convert
        with:
          input: expected.${{ matrix.from }}
          from: ${{ matrix.from }}
          to: ${{ matrix.to }}
          token: ${{ steps.decrypt-token.outputs.value }}
      - name: Save result
        run: echo '${{ steps.convert.outputs.output }}' > actual.${{ matrix.to }}
      - name: Print actual file
        run: cat actual.${{ matrix.to }}
      - name: Validate
        run: cmp -s "expected.${{ matrix.to }}" "actual.${{ matrix.to }}" || diff "expected.${{ matrix.to }}" "actual.${{ matrix.to }}"
      - name: Clean up
        if: ${{ always() }}
        run: |
          rm -f expected.{json,props,xml,yaml}
          rm -f actual.${{ matrix.to }}
